from datetime import datetime

import telebot
from astropy.coordinates import EarthLocation
from flatlib import const
from flatlib.chart import Chart
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from telebot import types

bot = telebot.TeleBot("6215633342:AAGJuVbMonsMpzN1HO9-69ScXqEIFnv4Ogs")

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞)
latitude = 50.4501  # —à–∏—Ä–æ—Ç–∞
longitude = 30.5234  # –¥–æ–≤–≥–æ—Ç–∞
elevation = 170  # –≤–∏—Å–æ—Ç–∞ –Ω–∞–¥ —Ä—ñ–≤–Ω–µ–º –º–æ—Ä—è (—É –º–µ—Ç—Ä–∞—Ö)
location = EarthLocation(lat=latitude, lon=longitude, height=elevation)

ZODIAC_SIGNS_DICT = {
    "Aries": "–û–≤–µ–Ω",
    "Taurus": "–¢–µ–ª–µ—Ü—å",
    "Gemini": "–ë–ª–∏–∑–Ω—é–∫–∏",
    "Cancer": "–†–∞–∫",
    "Leo": "–õ–µ–≤",
    "Virgo": "–î—ñ–≤–∞",
    "Libra": "–¢–µ—Ä–µ–∑–∏",
    "Scorpio": "–°–∫–æ—Ä–ø—ñ–æ–Ω",
    "Sagittarius": "–°—Ç—Ä—ñ–ª–µ—Ü—å",
    "Capricorn": "–ö–æ–∑–æ—Ä—ñ–≥",
    "Aquarius": "–í–æ–¥–æ–ª—ñ–π",
    "Pisces": "–†–∏–±–∏"
}

# –≥–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ–∫—Ä—ñ–º –∫–æ–º–∞–Ω–¥
user_statuses = {}


@bot.message_handler(content_types=['sticker', 'photo', 'audio', 'video', 'document', 'location', 'contact', 'voice'])
def handle_non_text(message):
    if not user_statuses.get(message.chat.id):
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")


# –§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç—É
def calculate_ascendant_with_flatlib(birth_date, birth_time, timezone):
    lat_deg, lat_min = divmod(abs(latitude) * 60, 60)
    lon_deg, lon_min = divmod(abs(longitude) * 60, 60)

    lat_str = f"{int(lat_deg)}n{int(lat_min):02}" if latitude >= 0 else f"{int(lat_deg)}s{int(lat_min):02}"
    lon_str = f"{int(lon_deg)}e{int(lon_min):02}" if longitude >= 0 else f"{int(lon_deg)}w{int(lon_min):02}"

    date = Datetime(birth_date.strftime('%Y/%m/%d'), birth_time.strftime('%H:%M'), timezone)
    pos = GeoPos(lat_str, lon_str)
    chart = Chart(date, pos, hsys=const.HOUSES_PLACIDUS)

    ascendant = chart.get(const.ASC)
    ascendant_sign_ukr = ZODIAC_SIGNS_DICT[ascendant.sign]

    return ascendant_sign_ukr


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É
def is_valid_time(time_str):
    try:
        datetime.strptime(time_str, '%H:%M')
        return True
    except ValueError:
        return False


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏
def is_valid_date(date_str):
    try:
        datetime.strptime(date_str, '%Y-%m-%d')
        return True
    except ValueError:
        return False


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–Ω—è —Ç–∞ –º—ñ—Å—è—Ü—è
def is_valid_day_month(day, month, year=None):
    if not isinstance(day, int) or not isinstance(month, int):
        return False

    if month < 1 or month > 12:
        return False

    if day < 1:
        return False

    if month in [1, 3, 5, 7, 8, 10, 12]:
        return day <= 31
    elif month in [4, 6, 9, 11]:
        return day <= 30
    else:  # February
        return day <= 29 if is_leap_year(year) else day <= 28


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–≥–æ —Ä–æ–∫—É
def is_leap_year(year):
    if year % 4 != 0:
        return False
    elif year % 100 != 0:
        return True
    elif year % 400 != 0:
        return False
    else:
        return True


# /start
@bot.message_handler(commands=['start'])
def start(message):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    if first_name is None and last_name is None:
        greeting = "–í—ñ—Ç–∞—î–º–æ!"
    else:
        greeting = f"–í—ñ—Ç–∞—î–º–æ, {first_name or ''} {last_name or ''}!"

    text = (
        "\n–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à—ñ:\n"
        "–î–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î): ")

    bot.send_message(message.chat.id, greeting)
    bot.send_message(message.chat.id, text)

    bot.register_next_step_handler(message, process_birth_date)


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
def process_birth_date(message):
    try:
        if not message.text:
            raise ValueError("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        birth_date_text = message.text.strip()
        if not is_valid_date(birth_date_text):
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î.")

        parts = birth_date_text.split('-')
        if len(parts) != 3 or not is_valid_day_month(int(parts[2]), int(parts[1])):
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–Ω—è —Ç–∞ –º—ñ—Å—è—Ü—è.")

        year, month, day = int(parts[0]), int(parts[1]), int(parts[2])
        if not is_valid_day_month(day, month):
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–Ω—è —Ç–∞ –º—ñ—Å—è—Ü—è.")

        birth_date = datetime(year, month, day).strftime('%d.%m.%Y')
        bot.send_message(message.chat.id, f"–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∞—à–∞ –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birth_date}")
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≤–∞—à–æ–≥–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (—É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•): ")
        bot.register_next_step_handler(message, process_time_date, birth_date)

    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
        bot.register_next_step_handler(message,
                                       process_birth_date)  # —Ü–µ–π —Ä—è–¥–æ–∫ –∑–Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
def process_time_date(message, birth_date):
    try:
        if not message.text:
            raise ValueError("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        birth_time = message.text.strip()
        if not is_valid_time(birth_time):
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•.")

        birth_datetime_str = f"{birth_date.split('.')[2]}-{birth_date.split('.')[1]}-{birth_date.split('.')[0]} {birth_time}"
        birth_datetime = datetime.strptime(birth_datetime_str, '%Y-%m-%d %H:%M')
        birth_date_obj = birth_datetime.date()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∏ –¥–∞—Ç–∏
        birth_time_obj = birth_datetime.time()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∏ —á–∞—Å—É

        timezone = '+03:00'  # –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ –≤–∞—à–æ—ó –ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        ascendant = calculate_ascendant_with_flatlib(birth_date_obj, birth_time_obj, timezone)

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç–æ–º
        bot.send_message(message.chat.id, f"–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∞—à —á–∞—Å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birth_time}")
        bot.send_message(message.chat.id, "–ú–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –ø–æ–≤–µ—Ä–Ω–µ–º–æ—Å—å –¥–æ –≤–∞—Å –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≤–∞—à –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç ü§ç")
        bot.send_message(message.chat.id, f"–í–∞—à –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç: <b>{ascendant}</b>", parse_mode='HTML')
        bot.send_message(message.chat.id, "–î–∞—Ä—É—î–º–æ –≤–∞–º –≥–∞–π–¥ 5 –ø—Ä–∏—á–∏–Ω –ü–†–û–Ø–í–õ–Ø–¢–ò–°–¨ –∑–∞ –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç–æ–º üíå")
        bot.send_message(message.chat.id, "–ù–µ—Ö–∞–π –±—É–¥–µ –≤ –∫–æ—Ä–∏—Å—Ç—åüí´")

        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è PDF —Ñ–∞–π–ª—É
        with open("GUIDE_BONUS_5REASONS.pdf", 'rb') as document:
            bot.send_document(message.chat.id, document)
        bot.send_message(message.chat.id, "–£ —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –±—É–¥—å-—è–∫–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ @prybulka üöÄ")
        user_statuses[message.chat.id] = True



    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
        bot.register_next_step_handler(message,
                                       process_time_date,
                                       birth_date)  # —Ü–µ–π —Ä—è–¥–æ–∫ –∑–Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É


# /website
@bot.message_handler(commands=['website'])
def site(message):
    text = "–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç: https://www.youtube.com/watch?v=-l_CYgBj4IE"
    bot.send_message(message.chat.id, text)


# /help
@bot.message_handler(commands=['help'])
def help(message):
    text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –°–∞–∫—Ä–∞–ª—É–∫ ü§ç"
    keyboard = types.InlineKeyboardMarkup()  # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    url_button = types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç–∏", url="https://t.me/prybulka")
    keyboard.add(url_button)  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    bot.send_message(message.chat.id, text, reply_markup=keyboard)  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é


bot.polling(none_stop=True)